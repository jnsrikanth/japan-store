// Prisma schema for Vercel Postgres + NextAuth + basic commerce models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  preferences   Preference[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id         String  @id @default(cuid())
  userId     String?
  user       User?   @relation(fields: [userId], references: [id])
  label      String?
  name       String?
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String @default("India")
  isDefault  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  email      String?
  status     String   @default("PENDING")
  totalINR   Int
  upiIdUsed  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  items      OrderItem[]
  payments   Payment[]
}

model OrderItem {
  id                 String  @id @default(cuid())
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          String
  nameSnapshot       String
  priceSnapshotINR   Int
  quantity           Int     @default(1)
  imageSnapshot      String?
}

model Payment {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method     String  @default("UPI")
  status     String  @default("PENDING")
  amountINR  Int
  reference  String?
  createdAt  DateTime @default(now())
}

model Preference {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  key      String
  value    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, key])
}
